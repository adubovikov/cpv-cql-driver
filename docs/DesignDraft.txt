SessionConfiguration [Common, byvalue]
	setMaxPoolSize()
	setDnsCacheTime()

NodeConfiguration [Common, byvalue]
	setAddress(hostname, port)
	setUseSsl()
	setUseCompression()
	setPasswordAuthentication(username, password)
	...
	getIpAddress(ipAddress, dnsCacheTime)
	updateIpAddress(ipAddress)

NodeCollection [Common, shared_ptr]
	chooseOneNode()
	reportFailure(nodeConfiguration)
	reportSuccess(nodeConfiguration)
	create(initialNodes)

SessionFactory [HighLevel, shared_ptr]
	getSession()
	create(sessionConfiguration, nodeCollection)

Session [HighLevel, Object]
	query(command) -> seastar::future<Object<ResultSet>>
	execute(command) -> seastar::future<>
	execute(batchCommand) -> seastar::future<>

ConnectionPool [LowLevel, shared_ptr]
	getConnection()
	ConnectionPool(sessionConfiguration, nodeCollection)

ConnectionInfo [LowLevel, byvalue]
	getVersion()
	getHeaderSize()
	getMaximumMessageBodySize()
	getCompressor()
	useVersion()
	useCompressor(compressor)

Connection [LowLevel, shared_ptr]
	Connection(sessionConfiguration, nodeConfiguration)

==========================================

auto factory = SessionFactory.create(
	SessionConfiguration()
		.setMaxPoolSize(100)
		.setDnsCacheTime(std::chrono::milliseconds(15000)),
	NodeCollection.create({
		NodeConfiguration()
			.setUseAddress("127.0.0.1")
			.setUseSsl(true)
			.setUseCompression(true)
			.setPasswordAuthentication("abc", "123456"),
		NodeConfiguration()
			.setUseAddress("127.0.0.1")
			.setUseSsl(true)
			.setUseCompression(true)
			.setPasswordAuthentication("abc", "123456")
	}));
auto session = factory.getSession();

auto command = Command::create("use myks;");
session.execute(command).then([] { });

auto command = Command::create("select * from table where key = ?;")
	.setParameters(cql::Int(123));
session.query(command).then([](auto result) { });

auto command = BatchCommand::create("insert into table (key, value) VALUES (?,?)")
	.setConsistency(ConsistencyLevel::Quorum)
	.addParameters(cql::Int(123), cql::Text("abc"))
	.addParameters(cql::Int(321), cql::Text("asd"));
session.execute(command).then([] { });

==========================================

Connection
	sendMessage(message)
		push message to queue
		set promise to promises[streamId]
		start sender if not started
		wait future

	startSender()
		repeat while queue not empty
			take message from queue
			send message
			resolve promises[streamId]
		set sender started flag to false
		# no race condition here because it's single thread

	waitNextMessage(stream)
		take message from queue
		if not success
			add wait count
			set promise to promises[streamId]
			start receiver if not started
			wait future
			take message from queue

	startReceiver()
		repeat while wait count > 0
			receive one message and push to queue
			if promises[streamId]
				resolve promises[streamId]
				reduce wait count
		set receiver started flag to false
		# no race condition here, same as above

==========================================

ConnectionPool
	makeConnection()
		select node from NodeCollection
		make connection from node
		connections.emplace_back(connection)
		return connection

	tryGetConnection()
		find connection with smallest stream count
		stream = connection.getStream()
		if stream.isValid()
			return (connection, stream)

	getConnection()
		if connection count < min pool size
			makeConnection()
			stream = connection.getStream()
			assert stream.isValid()
			return (connection, stream)
		connection, stream = tryGetConnection()
		if ok
			return (connection, stream)
		if connection count < max pool size
			makeConnection()
			stream = connection.getStream()
			assert stream.isValid()
			return (connection, stream)
		make promise
		push promise to waiting queue
		connection, stream = wait future
		return (connection, stream)

	notifyConnectionBecomeIdle(connection)
		stream = connection.getStream()
		assert stream.isValid()
		take promise from queue and set value

	findConnectionBecomeIdleTimer()
		sleep sometime
		if waiting queue not empty
			connection, stream = tryGetConnection()
			if ok
				take promise from queue and set value
		if waiting queue not empty
			findConnectionBecomeIdleTimer()

