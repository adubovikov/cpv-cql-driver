CqlSessionConfiguration [Common, byvalue]
	setMaxPoolSize()
	setDnsCacheTime()

CqlNodeConfiguration [Common, byvalue]
	setAddress(hostname, port)
	setUseSsl()
	setUseCompression()
	setPasswordAuthentication(username, password)
	...
	getIpAddress(ipAddress, dnsCacheTime)
	updateIpAddress(ipAddress)

CqlNodeCollection [Common, shared_ptr]
	chooseOneNode()
	reportFailure(nodeConfiguration)
	reportSuccess(nodeConfiguration)
	create(initialNodes)

CqlSessionFactory [HighLevel, shared_ptr]
	getSession()
	create(sessionConfiguration, nodeCollection)

CqlSession [HighLevel, CqlObject]
	...

CqlConnectionPool [LowLevel, shared_ptr]
	getConnection()
	CqlConnectionPool(sessionConfiguration, nodeCollection)

CqlConnectionInfo [LowLevel, byvalue]
	getVersion()
	getHeaderSize()
	getMaximumMessageBodySize()
	getCompressor()
	useVersion()
	useCompressor(compressor)

CqlConnection [LowLevel, shared_ptr]
	CqlConnection(sessionConfiguration, nodeConfiguration)

==========================================

auto factory = CqlSessionFactory.create(
	CqlSessionConfiguration()
		.setMaxPoolSize(100)
		.setDnsCacheTime(std::chrono::milliseconds(15000)),
	CqlNodeCollection.create({
		CqlNodeConfiguration()
			.setUseAddress("127.0.0.1")
			.setUseSsl(true)
			.setUseCompression(true)
			.setPasswordAuthentication("abc", "123456"),
		CqlNodeConfiguration()
			.setUseAddress("127.0.0.1")
			.setUseSsl(true)
			.setUseCompression(true)
			.setPasswordAuthentication("abc", "123456")
	}));
auto session = factory.getSession();

==========================================

CqlConnection
	sendMessage(message)
		push message and promise to queue
		start sender if not started
		wait future

	startSender()
		repeat while queue not empty
			take message from queue
			send message
			resolve promise
		set sender started flag to false
		# no race condition here because it's single thread

	waitNextMessage(stream)
		add wait count
		set promise to promises[streamId]
		start receiver if not started
		wait future

	startReceiver()
		repeat while wait count > 0
			receive one message
			resolve promises[streamId]
			reduce wait count
		set receiver started flag to false
		# no race condition here, same as above





